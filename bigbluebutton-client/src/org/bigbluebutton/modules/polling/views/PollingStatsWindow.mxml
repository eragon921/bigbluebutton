<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		   height="150"
		   width="410"  
		   xmlns:mate="http://mate.asfusion.com/"
		   implements="org.bigbluebutton.common.IBbbModuleWindow"
		   initialize="init();"
		   creationComplete="onCreationComplete()"
		   label="{ResourceUtil.getInstance().getString('bbb.polling.toolbar.toolTip')}"
		   title="{ResourceUtil.getInstance().getString('bbb.polling.toolbar.toolTip')}"
		   layout="absolute">

	<mx:Script>
		<![CDATA[
		import flexlib.mdi.events.MDIWindowEvent;
		import org.bigbluebutton.main.views.MainCanvas;
		import mx.controls.Alert;
		import org.bigbluebutton.common.LogUtil;	 
		import org.bigbluebutton.modules.polling.events.StartPollingEvent;
		import org.bigbluebutton.modules.polling.managers.PollingManager;
		import org.bigbluebutton.modules.polling.events.VoteEvent;
		import org.bigbluebutton.modules.polling.events.PollingStatsWindowEvent;
		import org.bigbluebutton.modules.polling.events.PollRefreshEvent;
		import org.bigbluebutton.modules.polling.events.StopPollEvent;
		import org.bigbluebutton.modules.polling.events.SavePollEvent;
		import org.bigbluebutton.modules.polling.events.PublishPollEvent;
		import org.bigbluebutton.modules.polling.events.GenerateWebKeyEvent;
		import org.bigbluebutton.modules.chat.events.SendPublicChatMessageEvent;
			
		import org.bigbluebutton.modules.polling.model.PollObject;
				
		import org.bigbluebutton.core.managers.UserManager;
		import org.bigbluebutton.main.model.users.Conference 
		import org.bigbluebutton.main.model.users.BBBUser;
		import org.bigbluebutton.common.Role;

		import mx.validators.Validator;	
		import mx.utils.ObjectUtil;
		import org.bigbluebutton.util.i18n.ResourceUtil;
			
		import mx.collections.ArrayCollection;
		import mx.core.IUIComponent;
		import mx.controls.Text;
		import mx.controls.TextArea;
		import mx.containers.*;
		import mx.controls.*;

	   	public static const LOGNAME:String = "[PollingStatsWindow] ";
		[Bindable] public var question:String;
		[Bindable] public var answers:Array;
		[Bindable] public var trackingPoll:PollObject;
		[Bindable] public var webPollUrl:String;
		public var viewingClosedPoll:Boolean = false;
		public var moduleAttributes:Object;
		private var _userid:Number; 
		private var window:PollingStatsWindow;
		private var conference:Conference;
		[Bindable]public var reviewing:Boolean = false;
		private var POLL_URL_COLOUR:String = "35071";
		private var webClosed:Boolean;

		private function init():void{
			webPollText.visible = (!reviewing && trackingPoll.publishToWeb);
			webPollBox.visible = webPollText.visible; 
			if (webPollText.visible){
				webClosed = false;
				var generate: GenerateWebKeyEvent = new GenerateWebKeyEvent(GenerateWebKeyEvent.GENERATE);
				generate.poll = trackingPoll;
				dispatchEvent(generate);
			}
		}
0
		private function onCreationComplete():void{
			conference = UserManager.getInstance().getConference();
			// If the statistics window is being opened to view a poll that has been published and closed, the interface will 
			// immediately appear with only the option to close the window. 
			if(viewingClosedPoll)
				stopPoll();
			if (webPollText.visible){
				webPollURLBox.text = webPollUrl;
				var chatMessage:SendPublicChatMessageEvent = new SendPublicChatMessageEvent(SendPublicChatMessageEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT);
				chatMessage.message = trackingPoll.title + " is available online at " + webPollUrl;
				chatMessage.time = "";
				chatMessage.color = POLL_URL_COLOUR.toString();
				chatMessage.language = ResourceUtil.getInstance().getCurrentLanguageCode().split("_")[0];
				dispatchEvent(chatMessage);
			}
			answers = trackingPoll.answers;
			question = trackingPoll.question;
			var lines:int = (question.length / 28) + 1;
			for(var s:String in answers){
				lines = lines + ((s.length / 28) + 1);	
			}				 	            	
			height = height + ((lines+1) * 45);
			createResultsTable(answers.length, answers);
		}			

		public function getPrefferedPosition():String{
			return MainCanvas.POPUP;
		}
				
		private function refreshPoll():void{
			var e:PollRefreshEvent = new PollRefreshEvent(PollRefreshEvent.GET);
			e.poll.title = trackingPoll.title;
			dispatchEvent(e);
		} // end of function refreshResults
					
		private function closeWindow():void{
			dispatchEvent(new PollingStatsWindowEvent(PollingStatsWindowEvent.CLOSE));
		}
 
 		public function refreshWindow(newVotes:Array, totalVotes:int, noVoteYet:int):void{
 			trackingPoll.votes = newVotes;
 			trackingPoll.totalVotes = totalVotes;
 			trackingPoll.didNotVote = noVoteYet;
 			createResultsTable(trackingPoll.answers.length, trackingPoll.answers);
 			invalidateDisplayList();
			validateNow();
 		}
 		
 		private function stopPoll():void{
 			refreshPoll();
 			btnRefreshResults.label = ResourceUtil.getInstance().getString('bbb.polling.stats.repost');
			btnRefreshResults.removeEventListener(MouseEvent.CLICK, refreshWindow);
			btnRefreshResults.addEventListener(MouseEvent.CLICK, publishPollAgain);
			btnClosePoll.label = ResourceUtil.getInstance().getString('bbb.polling.stats.close');
			btnClosePoll.removeEventListener(MouseEvent.CLICK, closeWindow);
			btnClosePoll.addEventListener(MouseEvent.CLICK, closeButtonClick); 
			trackingPoll.status = false;
			if (webPollText.visible && !webClosed){
				webClosed = true;
				var chatMessage:SendPublicChatMessageEvent = new SendPublicChatMessageEvent(SendPublicChatMessageEvent.SEND_PUBLIC_CHAT_MESSAGE_EVENT);
				chatMessage.message = "Web polling has been closed for " + trackingPoll.title;
				chatMessage.time = "";
				chatMessage.color = POLL_URL_COLOUR.toString();
				chatMessage.language = ResourceUtil.getInstance().getCurrentLanguageCode().split("_")[0];
				dispatchEvent(chatMessage);
			}
			stopViewersPolls();					
		}
			
		private function publishPollAgain(e:Event):void{
			var event:PublishPollEvent = new PublishPollEvent(PublishPollEvent.REPOST);
			event.poll = trackingPoll;
			dispatchEvent(event);
			closeWindow();
		}
			
		private function closeButtonClick(e:Event):void{
			closeWindow();
		}
			
		private function stopViewersPolls():void{
			var stopPollEvent:StopPollEvent = new StopPollEvent(StopPollEvent.STOP_POLL);
			stopPollEvent.poll = trackingPoll;
			dispatchEvent(stopPollEvent);
		}
 		
		// function receives Array.length and ArrayCollection
		private function createResultsTable(amount:uint, content:Array):void{
			var _tx: Text;
			var _votes: Text;
			var _percent: Text;
			var _hb: HBox; 
			var _line: HRule;
			var totalVotes:int = 0;
			for (var n:int = 0; n < trackingPoll.votes.length; n++){
				totalVotes+= int(trackingPoll.votes[n]);
			}
			// delete existing rows
			resultBox.removeAllChildren();
			// creating rows one by one
			for (var i:int = 0; i < amount; i++) {
				_tx = new Text();
				_votes= new Text;
				_percent= new Text();
				_hb = new HBox();
				
				_line = new HRule();
				_line.width = 290;
				
				_tx.name = "option" +i;
				_tx.width = 200;
				_tx.text =content[i].toString(); 
										
				_votes.name = "votes" +i;
				_votes.width = 30;
				_votes.text = trackingPoll.votes[i];
					
				_percent.name = "percent" +i;
				_percent.width = 50;
					
				// Percentage is in terms of how many votes each option has in terms of total votes
				if (totalVotes > 0){
					_percent.text = Math.round(100*(trackingPoll.votes[i]/totalVotes)) + "%";
				}else{
					// Prevents percentages from displaying misleading results before any votes come in, and from dividing by zero
					_percent.text = " ";
				}
					
				resultBox.addChild(_hb);					
				_hb.addChild(_tx);
				_hb.addChild(_votes);
				_hb.addChild(_percent);
				
				resultBox.addChild(_line);
			} // end of loop
			didNotVote();
			invalidateDisplayList();
			resultBox.validateNow();	
		} // end of function createResultsTable
			
		private function didNotVote():void{
			var _tx:Text = new Text();
			var _votes:Text= new Text;
			var _hb:HBox = new HBox();
			_tx.name = "optionNull";
			_tx.width = 200;
			_tx.text = ResourceUtil.getInstance().getString('bbb.polling.stats.didNotVote'); 
										
			_votes.name = "voteNull";
			_votes.width = 30;
			_votes.text = trackingPoll.didNotVote.toString();
								
			resultBox.addChild(_hb);					
			_hb.addChild(_tx);
			_hb.addChild(_votes);
		}	
	]]>
	</mx:Script>
	<!-- Prototype of Polling Statistics View Design -->
    <mx:VBox width="100%" 
    		 height="75%" 
    		 horizontalAlign="center" 
    		 paddingLeft="10" 
    		 paddingRight="10">
		<mx:HBox width="90%" 
				 paddingTop="10">
			<mx:Text id="webPollText"
					 text="{ResourceUtil.getInstance().getString('bbb.polling.stats.webPollURL')}" 
					 width="140"/>
		</mx:HBox>
		<mx:HBox id="webPollBox" 
				 width="90%" >
			<mx:TextArea id="webPollURLBox" 
						 editable="false" 
						 text="" 
						 horizontalScrollPolicy="off" 
						 verticalScrollPolicy="off" 
						 height="25"
						 width="95%"/>          
		</mx:HBox>
        <mx:Text width="200" 
        		 paddingTop="15" paddingBottom="10" 
               	 fontWeight="bold" textAlign="center"
                 text="{question}"/>
        <mx:Box id="resultBox"  
        		width="90%" 
        		height="90%" />
	</mx:VBox>
    <mx:ControlBar width="100%" 
    			   horizontalAlign="center">
    	<mx:Button id="btnRefreshResults" 
       			   label="{ResourceUtil.getInstance().getString('bbb.polling.stats.refresh')}" 
       			   click="refreshPoll()" 
       			   width="100" 
       			   height="30"/>
       	<mx:Button id="btnClosePoll" 
       			   label="{ResourceUtil.getInstance().getString('bbb.polling.stats.stopPoll')}" 
       			   click="stopPoll()" 
       			   width="100" height="30"/>
	</mx:ControlBar> 	 
</MDIWindow>